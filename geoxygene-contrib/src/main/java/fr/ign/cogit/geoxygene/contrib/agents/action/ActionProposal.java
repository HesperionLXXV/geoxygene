/**
 * 
 */
package fr.ign.cogit.geoxygene.contrib.agents.action;

import fr.ign.cogit.geoxygene.contrib.agents.agent.IAgent;
import fr.ign.cogit.geoxygene.contrib.agents.constraint.Constraint;

/**
 * Represents the proposal of an action that can be executed in order to try to
 * improve a {@link Constraint} of an {@link IAgent}.
 * 
 * @author CDuchene
 * 
 */
public class ActionProposal {
  // //////////////////////////////////////////
  // Fields //
  // //////////////////////////////////////////

  // All static fields //

  // Public fields //

  // Protected fields //

  // Package visible fields //

  // Private fields with public getters //
  /**
   * The constraint that this action proposal is intended to improve.
   */
  private Constraint handledConstraint;
  /**
   * True if the proposing agent is the actingAgent of the action, false
   * otherwise (the proposal is to let another agent execute the action).
   */
  private boolean agentActingItself;
  /**
   * The proposed action.
   */
  private Action action;
  /**
   * The weight with which the action is proposed.
   */
  private double weight;

  // Very private fields (no public getter) //

  // //////////////////////////////////////////
  // Static methods //
  // //////////////////////////////////////////

  // //////////////////////////////////////////
  // Public methods //
  // //////////////////////////////////////////

  // Public constructors //

  /**
   * @param handledConstraint the constraint the proposed action is supposed to
   *          improve
   * @param agentActingItself true if the action is to be acted by the agent
   *          itself, false if it is to be acted by another agent
   * @param action the proposed action
   * @param weight the weight with which the action is proposed
   */
  public ActionProposal(Constraint handledConstraint, boolean agentActingItself,
      Action action, double weight) {
    this.handledConstraint = handledConstraint;
    this.agentActingItself = agentActingItself;
    this.action = action;
    this.weight = weight;
  }

  // Public getters and setters //

  /**
   * Getter for handledConstraint.
   * @return the handledConstraint
   */
  public Constraint getHandledConstraint() {
    return this.handledConstraint;
  }

  /**
   * Getter for agentActingItself.
   * @return the agentActingItself
   */
  public boolean isAgentActingItself() {
    return this.agentActingItself;
  }

  /**
   * Getter for action.
   * @return the action
   */
  public Action getAction() {
    return this.action;
  }

  /**
   * Getter for weight.
   * @return the weight
   */
  public double getWeight() {
    return this.weight;
  }

  // Other public methods //

  /**
   * Clean the object to be sure the objets it refers to will well be erased by
   * the GC
   */
  public void clean() {
    this.setAction(null);
    this.setHandledConstraint(null);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String toString() {
    String str = "Action = " + this.getAction() + " Handled constraint = "
        + this.getHandledConstraint().getClass() + " Agent acting itself = "
        + this.isAgentActingItself() + " Weight = " + this.getWeight();
    return str;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int hashCode() {
    // Autogenerated by Eclipse. No particular pb to define it differently.
    final int prime = 31;
    int result = 1;
    result = prime * result
        + ((this.action == null) ? 0 : this.action.hashCode());
    result = prime * result + (this.agentActingItself ? 1231 : 1237);
    result = prime * result + ((this.handledConstraint == null) ? 0
        : this.handledConstraint.hashCode());
    long temp;
    temp = Double.doubleToLongBits(this.weight);
    result = prime * result + (int) (temp ^ (temp >>> 32));
    return result;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean equals(Object obj) {
    // Check normal equal
    if (this == obj) {
      return true;
    }
    // No equality with a null object
    if (obj == null) {
      return false;
    }
    // Obj must be of the same type
    if (this.getClass() != obj.getClass()) {
      return false;
    }
    // Now obj is of class ActionProposal
    ActionProposal other = (ActionProposal) obj;
    // Compare values of property agentActingItself
    if (this.agentActingItself != other.agentActingItself) {
      return false;
    }
    // Compare weights
    if (Double.doubleToLongBits(this.weight) != Double
        .doubleToLongBits(other.weight)) {
      return false;
    }
    // Compare classes of handled constraint
    // TODO Est-il pertinent d'imposer que les contraintes traitées soient les
    // mêmes?
    if (this.handledConstraint == null) {
      if (other.handledConstraint != null) {
        return false;
      }
    } else if (this.handledConstraint == null
        || other.handledConstraint == null) {
      if (other.handledConstraint != null || other.handledConstraint != null) {
        return false;
      }
    } else if (this.handledConstraint.getClass() != other.handledConstraint
        .getClass()) {
      return false;
    }
    // Compare proposed actions
    if (this.action == null) {
      if (other.action != null) {
        return false;
      }
    } else if (!this.action.equals(other.action)) {
      return false;
    }
    return true;
  }

  // //////////////////////////////////////////
  // Protected methods //
  // //////////////////////////////////////////

  // //////////////////////////////////////////
  // Package visible methods //
  // //////////////////////////////////////////

  // ////////////////////////////////////////
  // Private methods //
  // ////////////////////////////////////////

  /**
   * Setter for handledConstraint.
   * @param handledConstraint the handledConstraint to set
   */
  private void setHandledConstraint(Constraint handledConstraint) {
    this.handledConstraint = handledConstraint;
  }

  /**
   * Setter for action.
   * @param action the action to set
   */
  private void setAction(Action action) {
    this.action = action;
  }

}
